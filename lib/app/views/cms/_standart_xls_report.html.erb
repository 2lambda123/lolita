<% xml=Builder::XmlMarkup.new %>
<%=
xml.instruct! :xml, :version=>"1.0", :encoding=>"UTF-8" 
xml.Workbook({
        'xmlns'      => "urn:schemas-microsoft-com:office:spreadsheet", 
        'xmlns:o'    => "urn:schemas-microsoft-com:office:office",
        'xmlns:x'    => "urn:schemas-microsoft-com:office:excel",    
        'xmlns:html' => "http://www.w3.org/TR/REC-html40",
        'xmlns:ss'   => "urn:schemas-microsoft-com:office:spreadsheet" 
    }) do
  
    xml.Styles do
        xml.Style 'ss:ID' => 'Default', 'ss:Name' => 'Normal' do
            xml.Alignment 'ss:Vertical' => 'Bottom'
            xml.Borders
            xml.Font 'ss:FontName' => 'Verdana'
            xml.Interior
            xml.NumberFormat
            xml.Protection
        end
        xml.Style 'ss:ID' => 's22' do
            xml.NumberFormat 'ss:Format' => 'General Date'
        end
        xml.Style "ss:ID"=>"s63" do
            xml.Alignment "ss:Horizontal"=>"Center", "ss:Vertical"=>"Bottom"
        end
        xml.Style "ss:ID"=>"s64" do
            xml.Alignment "ss:Horizontal"=>"Left", "ss:Vertical"=>"Bottom"
        end
    end  #styles
    xml.Worksheet 'ss:Name' => "Dati" do
        xml.Table do
            xml.Row do
                for column_name in object.column_names
                    unless column_name.match(/_id\z/) || column_name=="id"
                        field=Admin::Field.find_by_name(column_name)
                        name=field ? (field.human_name.to_s.size>0 ? field.human_name : column_name) : column_name
                        xml.Cell { xml.Data name.capitalize, 'ss:Type' => 'String' }
                    end
                end
            end
            for row in data
                xml.Row do
                    for column in object.columns
                        unless column.name.match(/_id\z/) || column.name=="id"
                            value=row.send(column.name)
                            value = value && column.type==:datetime ? value.strftime("%Y.%m.%d %H:%M") : value
                            xml.Cell { xml.Data value , 'ss:Type' => 'String' }
                        end
                    end
                end
            end
        end #table
    end #worksheet
end # woorkbook
%>
